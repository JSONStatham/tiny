// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	models "urlshortener/internal/models"
)

// URLService is an autogenerated mock type for the URLService type
type URLService struct {
	mock.Mock
}

// DeleteURL provides a mock function with given fields: ctx, short_url
func (_m *URLService) DeleteURL(ctx context.Context, short_url string) error {
	ret := _m.Called(ctx, short_url)

	if len(ret) == 0 {
		panic("no return value specified for DeleteURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, short_url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *URLService) GetAll(ctx context.Context) ([]*models.URL, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*models.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.URL, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.URL); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURL provides a mock function with given fields: ctx, short_url
func (_m *URLService) GetURL(ctx context.Context, short_url string) (*models.URL, error) {
	ret := _m.Called(ctx, short_url)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 *models.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.URL, error)); ok {
		return rf(ctx, short_url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.URL); ok {
		r0 = rf(ctx, short_url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, short_url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveURL provides a mock function with given fields: ctx, original_url, short_url
func (_m *URLService) SaveURL(ctx context.Context, original_url string, short_url string) error {
	ret := _m.Called(ctx, original_url, short_url)

	if len(ret) == 0 {
		panic("no return value specified for SaveURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, original_url, short_url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Visit provides a mock function with given fields: ctx, url, r
func (_m *URLService) Visit(ctx context.Context, url *models.URL, r *http.Request) error {
	ret := _m.Called(ctx, url, r)

	if len(ret) == 0 {
		panic("no return value specified for Visit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.URL, *http.Request) error); ok {
		r0 = rf(ctx, url, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewURLService creates a new instance of URLService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLService(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLService {
	mock := &URLService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
